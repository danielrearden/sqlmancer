// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FindByIdBuilder mysql basic queries no additional options 1`] = `"select \`a1\`.\`actor_id\` as \`id\`, \`a1\`.\`first_name\` as \`firstName\`, \`a1\`.\`last_name\` as \`lastName\`, \`a1\`.\`last_update\` as \`lastUpdate\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql basic queries no additional options 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder mysql load nested 1`] = `"select \`f1\`.\`film_id\` as \`id\`, \`f1\`.\`title\` as \`title\`, \`f1\`.\`description\` as \`description\`, \`f1\`.\`release_year\` as \`releaseYear\`, \`f1\`.\`length\` as \`length\`, \`f1\`.\`rating\` as \`rating\`, \`f1\`.\`rental_rate\` as \`rentalRate\`, \`f1\`.\`rental_duration\` as \`rentalDuration\`, \`f1\`.\`replacement_cost\` as \`replacementCost\`, \`f1\`.\`extra_data\` as \`extraData\`, \`f1\`.\`last_update\` as \`lastUpdate\`, (select if(json_arrayagg(\`a1\`.\`o\`) is null, json_array(), json_arrayagg(\`a1\`.\`o\`)) from (select json_object('id', \`a2\`.\`actor_id\`, 'firstName', \`a2\`.\`first_name\`, 'lastName', \`a2\`.\`last_name\`, 'lastUpdate', \`a2\`.\`last_update\`, 'films', (select if(json_arrayagg(\`f3\`.\`o\`) is null, json_array(), json_arrayagg(\`f3\`.\`o\`)) from (select json_object('id', \`f4\`.\`film_id\`, 'title', \`f4\`.\`title\`, 'description', \`f4\`.\`description\`, 'releaseYear', \`f4\`.\`release_year\`, 'length', \`f4\`.\`length\`, 'rating', \`f4\`.\`rating\`, 'rentalRate', \`f4\`.\`rental_rate\`, 'rentalDuration', \`f4\`.\`rental_duration\`, 'replacementCost', \`f4\`.\`replacement_cost\`, 'extraData', \`f4\`.\`extra_data\`, 'lastUpdate', \`f4\`.\`last_update\`, 'language', (select json_extract(json_arrayagg(\`l1\`.\`o\`), '$[0]') from (select json_object('id', \`l2\`.\`language_id\`, 'name', \`l2\`.\`name\`, 'lastUpdate', \`l2\`.\`last_update\`) as \`o\` from \`language\` as \`l2\` where \`f4\`.\`language_id\` = \`l2\`.\`language_id\` limit ?) as \`l1\`)) as \`o\` from \`film\` as \`f4\` inner join \`film_actor\` as \`f5\` on \`f5\`.\`film_id\` = \`f4\`.\`film_id\` where \`a2\`.\`actor_id\` = \`f5\`.\`actor_id\` limit ?) as \`f3\`)) as \`o\` from \`actor\` as \`a2\` inner join \`film_actor\` as \`f2\` on \`f2\`.\`actor_id\` = \`a2\`.\`actor_id\` where \`f1\`.\`film_id\` = \`f2\`.\`film_id\` limit ?) as \`a1\`) as \`actors\` from \`film\` as \`f1\` where \`f1\`.\`film_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql load nested 2`] = `
Array [
  1,
  4,
  3,
  10,
  1,
]
`;

exports[`FindByIdBuilder mysql load with FK on builder table 1`] = `"select \`f1\`.\`film_id\` as \`id\`, \`f1\`.\`title\` as \`title\`, \`f1\`.\`description\` as \`description\`, \`f1\`.\`release_year\` as \`releaseYear\`, \`f1\`.\`length\` as \`length\`, \`f1\`.\`rating\` as \`rating\`, \`f1\`.\`rental_rate\` as \`rentalRate\`, \`f1\`.\`rental_duration\` as \`rentalDuration\`, \`f1\`.\`replacement_cost\` as \`replacementCost\`, \`f1\`.\`extra_data\` as \`extraData\`, \`f1\`.\`last_update\` as \`lastUpdate\`, (select json_extract(json_arrayagg(\`l1\`.\`o\`), '$[0]') from (select json_object('id', \`l2\`.\`language_id\`, 'name', \`l2\`.\`name\`, 'lastUpdate', \`l2\`.\`last_update\`) as \`o\` from \`language\` as \`l2\` where \`f1\`.\`language_id\` = \`l2\`.\`language_id\` limit ?) as \`l1\`) as \`language\` from \`film\` as \`f1\` where \`f1\`.\`film_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql load with FK on builder table 2`] = `
Array [
  1,
  10,
  1,
]
`;

exports[`FindByIdBuilder mysql load with FK on joined table 1`] = `"select \`l1\`.\`language_id\` as \`id\`, \`l1\`.\`name\` as \`name\`, \`l1\`.\`last_update\` as \`lastUpdate\`, (select if(json_arrayagg(\`f1\`.\`o\`) is null, json_array(), json_arrayagg(\`f1\`.\`o\`)) from (select json_object('id', \`f2\`.\`film_id\`, 'title', \`f2\`.\`title\`, 'description', \`f2\`.\`description\`, 'releaseYear', \`f2\`.\`release_year\`, 'length', \`f2\`.\`length\`, 'rating', \`f2\`.\`rating\`, 'rentalRate', \`f2\`.\`rental_rate\`, 'rentalDuration', \`f2\`.\`rental_duration\`, 'replacementCost', \`f2\`.\`replacement_cost\`, 'extraData', \`f2\`.\`extra_data\`, 'lastUpdate', \`f2\`.\`last_update\`) as \`o\` from \`film\` as \`f2\` where \`l1\`.\`language_id\` = \`f2\`.\`language_id\`) as \`f1\`) as \`films\` from \`language\` as \`l1\` where \`l1\`.\`language_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql load with FK on joined table 2`] = `
Array [
  5,
  1,
]
`;

exports[`FindByIdBuilder mysql load with additional options 1`] = `"select \`f1\`.\`film_id\` as \`id\`, \`f1\`.\`title\` as \`title\`, \`f1\`.\`description\` as \`description\`, \`f1\`.\`release_year\` as \`releaseYear\`, \`f1\`.\`length\` as \`length\`, \`f1\`.\`rating\` as \`rating\`, \`f1\`.\`rental_rate\` as \`rentalRate\`, \`f1\`.\`rental_duration\` as \`rentalDuration\`, \`f1\`.\`replacement_cost\` as \`replacementCost\`, \`f1\`.\`extra_data\` as \`extraData\`, \`f1\`.\`last_update\` as \`lastUpdate\`, (select if(json_arrayagg(\`a1\`.\`o\`) is null, json_array(), json_arrayagg(\`a1\`.\`o\`)) from (select json_object('firstName', \`a2\`.\`first_name\`) as \`o\` from \`actor\` as \`a2\` inner join \`film_actor\` as \`f2\` on \`f2\`.\`actor_id\` = \`a2\`.\`actor_id\` where \`f1\`.\`film_id\` = \`f2\`.\`film_id\` order by \`a2\`.\`first_name\` desc limit ? offset ?) as \`a1\`) as \`actors\` from \`film\` as \`f1\` where \`f1\`.\`film_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql load with additional options 2`] = `
Array [
  2,
  1,
  10,
  1,
]
`;

exports[`FindByIdBuilder mysql load with alias 1`] = `"select \`f1\`.\`film_id\` as \`id\`, \`f1\`.\`title\` as \`title\`, \`f1\`.\`description\` as \`description\`, \`f1\`.\`release_year\` as \`releaseYear\`, \`f1\`.\`length\` as \`length\`, \`f1\`.\`rating\` as \`rating\`, \`f1\`.\`rental_rate\` as \`rentalRate\`, \`f1\`.\`rental_duration\` as \`rentalDuration\`, \`f1\`.\`replacement_cost\` as \`replacementCost\`, \`f1\`.\`extra_data\` as \`extraData\`, \`f1\`.\`last_update\` as \`lastUpdate\`, (select if(json_arrayagg(\`p1\`.\`o\`) is null, json_array(), json_arrayagg(\`p1\`.\`o\`)) from (select json_object('id', \`a1\`.\`actor_id\`, 'firstName', \`a1\`.\`first_name\`, 'lastName', \`a1\`.\`last_name\`, 'lastUpdate', \`a1\`.\`last_update\`) as \`o\` from \`actor\` as \`a1\` inner join \`film_actor\` as \`f2\` on \`f2\`.\`actor_id\` = \`a1\`.\`actor_id\` where \`f1\`.\`film_id\` = \`f2\`.\`film_id\`) as \`p1\`) as \`performers\` from \`film\` as \`f1\` where \`f1\`.\`film_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql load with alias 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder mysql load with default builder 1`] = `"select \`f1\`.\`film_id\` as \`id\`, \`f1\`.\`title\` as \`title\`, \`f1\`.\`description\` as \`description\`, \`f1\`.\`release_year\` as \`releaseYear\`, \`f1\`.\`length\` as \`length\`, \`f1\`.\`rating\` as \`rating\`, \`f1\`.\`rental_rate\` as \`rentalRate\`, \`f1\`.\`rental_duration\` as \`rentalDuration\`, \`f1\`.\`replacement_cost\` as \`replacementCost\`, \`f1\`.\`extra_data\` as \`extraData\`, \`f1\`.\`last_update\` as \`lastUpdate\`, (select if(json_arrayagg(\`a1\`.\`o\`) is null, json_array(), json_arrayagg(\`a1\`.\`o\`)) from (select json_object('id', \`a2\`.\`actor_id\`, 'firstName', \`a2\`.\`first_name\`, 'lastName', \`a2\`.\`last_name\`, 'lastUpdate', \`a2\`.\`last_update\`) as \`o\` from \`actor\` as \`a2\` inner join \`film_actor\` as \`f2\` on \`f2\`.\`actor_id\` = \`a2\`.\`actor_id\` where \`f1\`.\`film_id\` = \`f2\`.\`film_id\`) as \`a1\`) as \`actors\` from \`film\` as \`f1\` where \`f1\`.\`film_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql load with default builder 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder mysql load with junction table 1`] = `"select \`f1\`.\`film_id\` as \`id\`, \`f1\`.\`title\` as \`title\`, \`f1\`.\`description\` as \`description\`, \`f1\`.\`release_year\` as \`releaseYear\`, \`f1\`.\`length\` as \`length\`, \`f1\`.\`rating\` as \`rating\`, \`f1\`.\`rental_rate\` as \`rentalRate\`, \`f1\`.\`rental_duration\` as \`rentalDuration\`, \`f1\`.\`replacement_cost\` as \`replacementCost\`, \`f1\`.\`extra_data\` as \`extraData\`, \`f1\`.\`last_update\` as \`lastUpdate\`, (select if(json_arrayagg(\`a1\`.\`o\`) is null, json_array(), json_arrayagg(\`a1\`.\`o\`)) from (select json_object('id', \`a2\`.\`actor_id\`, 'firstName', \`a2\`.\`first_name\`, 'lastName', \`a2\`.\`last_name\`, 'lastUpdate', \`a2\`.\`last_update\`) as \`o\` from \`actor\` as \`a2\` inner join \`film_actor\` as \`f2\` on \`f2\`.\`actor_id\` = \`a2\`.\`actor_id\` where \`f1\`.\`film_id\` = \`f2\`.\`film_id\`) as \`a1\`) as \`actors\` from \`film\` as \`f1\` where \`f1\`.\`film_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql load with junction table 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder mysql loadPaginated with FK on builder table 1`] = `"select \`f1\`.\`film_id\` as \`id\`, \`f1\`.\`title\` as \`title\`, \`f1\`.\`description\` as \`description\`, \`f1\`.\`release_year\` as \`releaseYear\`, \`f1\`.\`length\` as \`length\`, \`f1\`.\`rating\` as \`rating\`, \`f1\`.\`rental_rate\` as \`rentalRate\`, \`f1\`.\`rental_duration\` as \`rentalDuration\`, \`f1\`.\`replacement_cost\` as \`replacementCost\`, \`f1\`.\`extra_data\` as \`extraData\`, \`f1\`.\`last_update\` as \`lastUpdate\`, (select (select json_object('aggregate', (select json_object('max', json_object('name', max(\`l2\`.\`name\`))) from (select \`l3\`.\`name\` from \`language\` as \`l3\` where \`f1\`.\`language_id\` = \`l3\`.\`language_id\`) as \`l2\`)) as \`page\`) as \`l1\`) as \`languageAggregate\` from \`film\` as \`f1\` where \`f1\`.\`film_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql loadPaginated with FK on builder table 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder mysql loadPaginated with FK on joined table 1`] = `"select \`l1\`.\`language_id\` as \`id\`, \`l1\`.\`name\` as \`name\`, \`l1\`.\`last_update\` as \`lastUpdate\`, (select (select json_object('aggregate', (select json_object('max', json_object('rentalRate', coalesce(max(\`f2\`.\`rental_rate\`), 0))) from (select \`f3\`.\`rental_rate\` from \`film\` as \`f3\` where \`l1\`.\`language_id\` = \`f3\`.\`language_id\`) as \`f2\`)) as \`page\`) as \`f1\`) as \`filmsAggregate\` from \`language\` as \`l1\` where \`l1\`.\`language_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql loadPaginated with FK on joined table 2`] = `
Array [
  1,
  1,
]
`;

exports[`FindByIdBuilder mysql loadPaginated with additional options 1`] = `"select \`a1\`.\`actor_id\` as \`id\`, \`a1\`.\`first_name\` as \`firstName\`, \`a1\`.\`last_name\` as \`lastName\`, \`a1\`.\`last_update\` as \`lastUpdate\`, (select (select json_object('aggregate', (select json_object('max', json_object('rentalRate', coalesce(max(\`f2\`.\`rental_rate\`), 0))) from (select \`f3\`.\`rental_rate\` from \`film\` as \`f3\` inner join \`film_actor\` as \`f4\` on \`f4\`.\`film_id\` = \`f3\`.\`film_id\` where \`a1\`.\`actor_id\` = \`f4\`.\`actor_id\` order by \`f3\`.\`title\` desc limit ? offset ?) as \`f2\`)) as \`page\`) as \`f1\`) as \`filmsAggregate\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql loadPaginated with additional options 2`] = `
Array [
  2,
  1,
  10,
  1,
]
`;

exports[`FindByIdBuilder mysql loadPaginated with junction table 1`] = `"select \`a1\`.\`actor_id\` as \`id\`, \`a1\`.\`first_name\` as \`firstName\`, \`a1\`.\`last_name\` as \`lastName\`, \`a1\`.\`last_update\` as \`lastUpdate\`, (select (select json_object('aggregate', (select json_object('max', json_object('rentalRate', coalesce(max(\`f2\`.\`rental_rate\`), 0))) from (select \`f3\`.\`rental_rate\` from \`film\` as \`f3\` inner join \`film_actor\` as \`f4\` on \`f4\`.\`film_id\` = \`f3\`.\`film_id\` where \`a1\`.\`actor_id\` = \`f4\`.\`actor_id\`) as \`f2\`)) as \`page\`) as \`f1\`) as \`filmsAggregate\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql loadPaginated with junction table 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder mysql resolveInfo basic query 1`] = `"select \`a1\`.\`actor_id\` as \`id\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql resolveInfo basic query 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder mysql resolveInfo query with alias 1`] = `"select \`a1\`.\`actor_id\` as \`id\`, \`a1\`.\`first_name\` as \`firstName\`, \`a1\`.\`last_name\` as \`lastName\`, (select if(json_arrayagg(\`m1\`.\`o\`) is null, json_array(), json_arrayagg(\`m1\`.\`o\`)) from (select json_object('id', \`f1\`.\`film_id\`, 'title', \`f1\`.\`title\`) as \`o\` from \`film\` as \`f1\` inner join \`film_actor\` as \`f2\` on \`f2\`.\`film_id\` = \`f1\`.\`film_id\` where \`a1\`.\`actor_id\` = \`f2\`.\`actor_id\`) as \`m1\`) as \`movies\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql resolveInfo query with alias 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder mysql resolveInfo query with nested aggregate 1`] = `"select \`a1\`.\`actor_id\` as \`id\`, \`a1\`.\`first_name\` as \`firstName\`, \`a1\`.\`last_name\` as \`lastName\`, (select (select json_object('aggregate', (select json_object('count', coalesce(count(\`f2\`.\`film_id\`), 0), 'avg', json_object('rentalRate', coalesce(avg(\`f2\`.\`rental_rate\`), 0), 'replacementCost', coalesce(avg(\`f2\`.\`replacement_cost\`), 0)), 'sum', json_object('rentalRate', coalesce(sum(\`f2\`.\`rental_rate\`), 0), 'replacementCost', coalesce(sum(\`f2\`.\`replacement_cost\`), 0)), 'min', json_object('title', min(\`f2\`.\`title\`), 'releaseYear', coalesce(min(\`f2\`.\`release_year\`), 0)), 'max', json_object('title', max(\`f2\`.\`title\`), 'releaseYear', coalesce(max(\`f2\`.\`release_year\`), 0))) from (select \`f3\`.\`film_id\`, \`f3\`.\`rental_rate\`, \`f3\`.\`replacement_cost\`, \`f3\`.\`title\`, \`f3\`.\`release_year\` from \`film\` as \`f3\` inner join \`film_actor\` as \`f4\` on \`f4\`.\`film_id\` = \`f3\`.\`film_id\` where \`a1\`.\`actor_id\` = \`f4\`.\`actor_id\` and \`f3\`.\`title\` = ? order by \`f3\`.\`release_year\` desc limit ? offset ?) as \`f2\`)) as \`page\`) as \`f1\`) as \`filmsPaginated\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql resolveInfo query with nested aggregate 2`] = `
Array [
  "Title",
  10,
  3,
  10,
  1,
]
`;

exports[`FindByIdBuilder mysql resolveInfo query with nested arguments 1`] = `"select \`a1\`.\`actor_id\` as \`id\`, \`a1\`.\`first_name\` as \`firstName\`, \`a1\`.\`last_name\` as \`lastName\`, (select if(json_arrayagg(\`f1\`.\`o\`) is null, json_array(), json_arrayagg(\`f1\`.\`o\`)) from (select json_object('id', \`f2\`.\`film_id\`, 'title', \`f2\`.\`title\`) as \`o\` from \`film\` as \`f2\` inner join \`film_actor\` as \`f3\` on \`f3\`.\`film_id\` = \`f2\`.\`film_id\` where \`a1\`.\`actor_id\` = \`f3\`.\`actor_id\` and \`f2\`.\`title\` = ? order by \`f2\`.\`release_year\` desc limit ? offset ?) as \`f1\`) as \`films\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql resolveInfo query with nested arguments 2`] = `
Array [
  "Title",
  10,
  3,
  10,
  1,
]
`;

exports[`FindByIdBuilder mysql resolveInfo valid path 1`] = `"select \`c1\`.\`customer_id\` as \`id\` from \`customer\` as \`c1\` where \`c1\`.\`customer_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql resolveInfo valid path 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder mysql select add 1`] = `"select \`a1\`.\`first_name\` as \`firstName\`, \`a1\`.\`last_name\` as \`lastName\`, \`a1\`.\`actor_id\` as \`id\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql select add 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder mysql select add raw 1`] = `"select \`a1\`.\`first_name\` as \`firstName\`, \`a1\`.\`first_name\` as \`first_name\`, \`a1\`.\`first_name\` as \`first_name_again\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql select add raw 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder mysql select all 1`] = `"select \`a1\`.\`actor_id\` as \`id\`, \`a1\`.\`first_name\` as \`firstName\`, \`a1\`.\`last_name\` as \`lastName\`, \`a1\`.\`last_update\` as \`lastUpdate\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql select all 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder mysql select with missing field 1`] = `"select \`a1\`.\`last_name\` as \`lastName\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql select with missing field 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder mysql select with multiple fields 1`] = `"select \`a1\`.\`first_name\` as \`firstName\`, \`a1\`.\`last_name\` as \`lastName\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql select with multiple fields 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder mysql select with no fields 1`] = `"select null from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder mysql select with no fields 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder postgres basic queries no additional options 1`] = `"select \\"a1\\".\\"actor_id\\" as \\"id\\", \\"a1\\".\\"first_name\\" as \\"firstName\\", \\"a1\\".\\"last_name\\" as \\"lastName\\", \\"a1\\".\\"last_update\\" as \\"lastUpdate\\" from \\"actor\\" as \\"a1\\" where \\"a1\\".\\"actor_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres basic queries no additional options 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder postgres load nested 1`] = `"select \\"f1\\".\\"film_id\\" as \\"id\\", \\"f1\\".\\"title\\" as \\"title\\", \\"f1\\".\\"description\\" as \\"description\\", \\"f1\\".\\"release_year\\" as \\"releaseYear\\", \\"f1\\".\\"length\\" as \\"length\\", \\"f1\\".\\"rating\\" as \\"rating\\", \\"f1\\".\\"rental_rate\\" as \\"rentalRate\\", \\"f1\\".\\"rental_duration\\" as \\"rentalDuration\\", \\"f1\\".\\"replacement_cost\\" as \\"replacementCost\\", \\"f1\\".\\"special_features\\" as \\"specialFeatures\\", \\"f1\\".\\"extra_data\\" as \\"extraData\\", \\"f1\\".\\"last_update\\" as \\"lastUpdate\\", (select coalesce(nullif(json_agg(\\"a1\\".\\"o\\")::text, '[null]'), '[]')::json from (select json_build_object('id', \\"a2\\".\\"actor_id\\", 'firstName', \\"a2\\".\\"first_name\\", 'lastName', \\"a2\\".\\"last_name\\", 'lastUpdate', \\"a2\\".\\"last_update\\", 'films', (select coalesce(nullif(json_agg(\\"f3\\".\\"o\\")::text, '[null]'), '[]')::json from (select json_build_object('id', \\"f4\\".\\"film_id\\", 'title', \\"f4\\".\\"title\\", 'description', \\"f4\\".\\"description\\", 'releaseYear', \\"f4\\".\\"release_year\\", 'length', \\"f4\\".\\"length\\", 'rating', \\"f4\\".\\"rating\\", 'rentalRate', \\"f4\\".\\"rental_rate\\", 'rentalDuration', \\"f4\\".\\"rental_duration\\", 'replacementCost', \\"f4\\".\\"replacement_cost\\", 'specialFeatures', \\"f4\\".\\"special_features\\", 'extraData', \\"f4\\".\\"extra_data\\", 'lastUpdate', \\"f4\\".\\"last_update\\", 'language', (select json_agg(\\"l1\\".\\"o\\") -> 0 from (select json_build_object('id', \\"l2\\".\\"language_id\\", 'name', \\"l2\\".\\"name\\", 'lastUpdate', \\"l2\\".\\"last_update\\") as \\"o\\" from \\"language\\" as \\"l2\\" where \\"f4\\".\\"language_id\\" = \\"l2\\".\\"language_id\\" limit ?) as \\"l1\\")) as \\"o\\" from \\"film\\" as \\"f4\\" inner join \\"film_actor\\" as \\"f5\\" on \\"f5\\".\\"film_id\\" = \\"f4\\".\\"film_id\\" where \\"a2\\".\\"actor_id\\" = \\"f5\\".\\"actor_id\\" limit ?) as \\"f3\\")) as \\"o\\" from \\"actor\\" as \\"a2\\" inner join \\"film_actor\\" as \\"f2\\" on \\"f2\\".\\"actor_id\\" = \\"a2\\".\\"actor_id\\" where \\"f1\\".\\"film_id\\" = \\"f2\\".\\"film_id\\" limit ?) as \\"a1\\") as \\"actors\\" from \\"film\\" as \\"f1\\" where \\"f1\\".\\"film_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres load nested 2`] = `
Array [
  1,
  4,
  3,
  10,
  1,
]
`;

exports[`FindByIdBuilder postgres load with FK on builder table 1`] = `"select \\"f1\\".\\"film_id\\" as \\"id\\", \\"f1\\".\\"title\\" as \\"title\\", \\"f1\\".\\"description\\" as \\"description\\", \\"f1\\".\\"release_year\\" as \\"releaseYear\\", \\"f1\\".\\"length\\" as \\"length\\", \\"f1\\".\\"rating\\" as \\"rating\\", \\"f1\\".\\"rental_rate\\" as \\"rentalRate\\", \\"f1\\".\\"rental_duration\\" as \\"rentalDuration\\", \\"f1\\".\\"replacement_cost\\" as \\"replacementCost\\", \\"f1\\".\\"special_features\\" as \\"specialFeatures\\", \\"f1\\".\\"extra_data\\" as \\"extraData\\", \\"f1\\".\\"last_update\\" as \\"lastUpdate\\", (select json_agg(\\"l1\\".\\"o\\") -> 0 from (select json_build_object('id', \\"l2\\".\\"language_id\\", 'name', \\"l2\\".\\"name\\", 'lastUpdate', \\"l2\\".\\"last_update\\") as \\"o\\" from \\"language\\" as \\"l2\\" where \\"f1\\".\\"language_id\\" = \\"l2\\".\\"language_id\\" limit ?) as \\"l1\\") as \\"language\\" from \\"film\\" as \\"f1\\" where \\"f1\\".\\"film_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres load with FK on builder table 2`] = `
Array [
  1,
  10,
  1,
]
`;

exports[`FindByIdBuilder postgres load with FK on joined table 1`] = `"select \\"l1\\".\\"language_id\\" as \\"id\\", \\"l1\\".\\"name\\" as \\"name\\", \\"l1\\".\\"last_update\\" as \\"lastUpdate\\", (select coalesce(nullif(json_agg(\\"f1\\".\\"o\\")::text, '[null]'), '[]')::json from (select json_build_object('id', \\"f2\\".\\"film_id\\", 'title', \\"f2\\".\\"title\\", 'description', \\"f2\\".\\"description\\", 'releaseYear', \\"f2\\".\\"release_year\\", 'length', \\"f2\\".\\"length\\", 'rating', \\"f2\\".\\"rating\\", 'rentalRate', \\"f2\\".\\"rental_rate\\", 'rentalDuration', \\"f2\\".\\"rental_duration\\", 'replacementCost', \\"f2\\".\\"replacement_cost\\", 'specialFeatures', \\"f2\\".\\"special_features\\", 'extraData', \\"f2\\".\\"extra_data\\", 'lastUpdate', \\"f2\\".\\"last_update\\") as \\"o\\" from \\"film\\" as \\"f2\\" where \\"l1\\".\\"language_id\\" = \\"f2\\".\\"language_id\\") as \\"f1\\") as \\"films\\" from \\"language\\" as \\"l1\\" where \\"l1\\".\\"language_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres load with FK on joined table 2`] = `
Array [
  5,
  1,
]
`;

exports[`FindByIdBuilder postgres load with additional options 1`] = `"select \\"f1\\".\\"film_id\\" as \\"id\\", \\"f1\\".\\"title\\" as \\"title\\", \\"f1\\".\\"description\\" as \\"description\\", \\"f1\\".\\"release_year\\" as \\"releaseYear\\", \\"f1\\".\\"length\\" as \\"length\\", \\"f1\\".\\"rating\\" as \\"rating\\", \\"f1\\".\\"rental_rate\\" as \\"rentalRate\\", \\"f1\\".\\"rental_duration\\" as \\"rentalDuration\\", \\"f1\\".\\"replacement_cost\\" as \\"replacementCost\\", \\"f1\\".\\"special_features\\" as \\"specialFeatures\\", \\"f1\\".\\"extra_data\\" as \\"extraData\\", \\"f1\\".\\"last_update\\" as \\"lastUpdate\\", (select coalesce(nullif(json_agg(\\"a1\\".\\"o\\")::text, '[null]'), '[]')::json from (select json_build_object('firstName', \\"a2\\".\\"first_name\\") as \\"o\\" from \\"actor\\" as \\"a2\\" inner join \\"film_actor\\" as \\"f2\\" on \\"f2\\".\\"actor_id\\" = \\"a2\\".\\"actor_id\\" where \\"f1\\".\\"film_id\\" = \\"f2\\".\\"film_id\\" order by \\"a2\\".\\"first_name\\" desc limit ? offset ?) as \\"a1\\") as \\"actors\\" from \\"film\\" as \\"f1\\" where \\"f1\\".\\"film_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres load with additional options 2`] = `
Array [
  2,
  1,
  10,
  1,
]
`;

exports[`FindByIdBuilder postgres load with alias 1`] = `"select \\"f1\\".\\"film_id\\" as \\"id\\", \\"f1\\".\\"title\\" as \\"title\\", \\"f1\\".\\"description\\" as \\"description\\", \\"f1\\".\\"release_year\\" as \\"releaseYear\\", \\"f1\\".\\"length\\" as \\"length\\", \\"f1\\".\\"rating\\" as \\"rating\\", \\"f1\\".\\"rental_rate\\" as \\"rentalRate\\", \\"f1\\".\\"rental_duration\\" as \\"rentalDuration\\", \\"f1\\".\\"replacement_cost\\" as \\"replacementCost\\", \\"f1\\".\\"special_features\\" as \\"specialFeatures\\", \\"f1\\".\\"extra_data\\" as \\"extraData\\", \\"f1\\".\\"last_update\\" as \\"lastUpdate\\", (select coalesce(nullif(json_agg(\\"p1\\".\\"o\\")::text, '[null]'), '[]')::json from (select json_build_object('id', \\"a1\\".\\"actor_id\\", 'firstName', \\"a1\\".\\"first_name\\", 'lastName', \\"a1\\".\\"last_name\\", 'lastUpdate', \\"a1\\".\\"last_update\\") as \\"o\\" from \\"actor\\" as \\"a1\\" inner join \\"film_actor\\" as \\"f2\\" on \\"f2\\".\\"actor_id\\" = \\"a1\\".\\"actor_id\\" where \\"f1\\".\\"film_id\\" = \\"f2\\".\\"film_id\\") as \\"p1\\") as \\"performers\\" from \\"film\\" as \\"f1\\" where \\"f1\\".\\"film_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres load with alias 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder postgres load with default builder 1`] = `"select \\"f1\\".\\"film_id\\" as \\"id\\", \\"f1\\".\\"title\\" as \\"title\\", \\"f1\\".\\"description\\" as \\"description\\", \\"f1\\".\\"release_year\\" as \\"releaseYear\\", \\"f1\\".\\"length\\" as \\"length\\", \\"f1\\".\\"rating\\" as \\"rating\\", \\"f1\\".\\"rental_rate\\" as \\"rentalRate\\", \\"f1\\".\\"rental_duration\\" as \\"rentalDuration\\", \\"f1\\".\\"replacement_cost\\" as \\"replacementCost\\", \\"f1\\".\\"special_features\\" as \\"specialFeatures\\", \\"f1\\".\\"extra_data\\" as \\"extraData\\", \\"f1\\".\\"last_update\\" as \\"lastUpdate\\", (select coalesce(nullif(json_agg(\\"a1\\".\\"o\\")::text, '[null]'), '[]')::json from (select json_build_object('id', \\"a2\\".\\"actor_id\\", 'firstName', \\"a2\\".\\"first_name\\", 'lastName', \\"a2\\".\\"last_name\\", 'lastUpdate', \\"a2\\".\\"last_update\\") as \\"o\\" from \\"actor\\" as \\"a2\\" inner join \\"film_actor\\" as \\"f2\\" on \\"f2\\".\\"actor_id\\" = \\"a2\\".\\"actor_id\\" where \\"f1\\".\\"film_id\\" = \\"f2\\".\\"film_id\\") as \\"a1\\") as \\"actors\\" from \\"film\\" as \\"f1\\" where \\"f1\\".\\"film_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres load with default builder 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder postgres load with junction table 1`] = `"select \\"f1\\".\\"film_id\\" as \\"id\\", \\"f1\\".\\"title\\" as \\"title\\", \\"f1\\".\\"description\\" as \\"description\\", \\"f1\\".\\"release_year\\" as \\"releaseYear\\", \\"f1\\".\\"length\\" as \\"length\\", \\"f1\\".\\"rating\\" as \\"rating\\", \\"f1\\".\\"rental_rate\\" as \\"rentalRate\\", \\"f1\\".\\"rental_duration\\" as \\"rentalDuration\\", \\"f1\\".\\"replacement_cost\\" as \\"replacementCost\\", \\"f1\\".\\"special_features\\" as \\"specialFeatures\\", \\"f1\\".\\"extra_data\\" as \\"extraData\\", \\"f1\\".\\"last_update\\" as \\"lastUpdate\\", (select coalesce(nullif(json_agg(\\"a1\\".\\"o\\")::text, '[null]'), '[]')::json from (select json_build_object('id', \\"a2\\".\\"actor_id\\", 'firstName', \\"a2\\".\\"first_name\\", 'lastName', \\"a2\\".\\"last_name\\", 'lastUpdate', \\"a2\\".\\"last_update\\") as \\"o\\" from \\"actor\\" as \\"a2\\" inner join \\"film_actor\\" as \\"f2\\" on \\"f2\\".\\"actor_id\\" = \\"a2\\".\\"actor_id\\" where \\"f1\\".\\"film_id\\" = \\"f2\\".\\"film_id\\") as \\"a1\\") as \\"actors\\" from \\"film\\" as \\"f1\\" where \\"f1\\".\\"film_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres load with junction table 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder postgres loadPaginated with FK on builder table 1`] = `"select \\"f1\\".\\"film_id\\" as \\"id\\", \\"f1\\".\\"title\\" as \\"title\\", \\"f1\\".\\"description\\" as \\"description\\", \\"f1\\".\\"release_year\\" as \\"releaseYear\\", \\"f1\\".\\"length\\" as \\"length\\", \\"f1\\".\\"rating\\" as \\"rating\\", \\"f1\\".\\"rental_rate\\" as \\"rentalRate\\", \\"f1\\".\\"rental_duration\\" as \\"rentalDuration\\", \\"f1\\".\\"replacement_cost\\" as \\"replacementCost\\", \\"f1\\".\\"special_features\\" as \\"specialFeatures\\", \\"f1\\".\\"extra_data\\" as \\"extraData\\", \\"f1\\".\\"last_update\\" as \\"lastUpdate\\", (select (select json_build_object('aggregate', (select json_build_object('max', json_build_object('name', max(\\"l2\\".\\"name\\"))) from (select \\"l3\\".\\"name\\" from \\"language\\" as \\"l3\\" where \\"f1\\".\\"language_id\\" = \\"l3\\".\\"language_id\\") as \\"l2\\")) as \\"page\\") as \\"l1\\") as \\"languageAggregate\\" from \\"film\\" as \\"f1\\" where \\"f1\\".\\"film_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres loadPaginated with FK on builder table 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder postgres loadPaginated with FK on joined table 1`] = `"select \\"l1\\".\\"language_id\\" as \\"id\\", \\"l1\\".\\"name\\" as \\"name\\", \\"l1\\".\\"last_update\\" as \\"lastUpdate\\", (select (select json_build_object('aggregate', (select json_build_object('max', json_build_object('rentalRate', coalesce(max(\\"f2\\".\\"rental_rate\\"), 0))) from (select \\"f3\\".\\"rental_rate\\" from \\"film\\" as \\"f3\\" where \\"l1\\".\\"language_id\\" = \\"f3\\".\\"language_id\\") as \\"f2\\")) as \\"page\\") as \\"f1\\") as \\"filmsAggregate\\" from \\"language\\" as \\"l1\\" where \\"l1\\".\\"language_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres loadPaginated with FK on joined table 2`] = `
Array [
  1,
  1,
]
`;

exports[`FindByIdBuilder postgres loadPaginated with additional options 1`] = `"select \\"a1\\".\\"actor_id\\" as \\"id\\", \\"a1\\".\\"first_name\\" as \\"firstName\\", \\"a1\\".\\"last_name\\" as \\"lastName\\", \\"a1\\".\\"last_update\\" as \\"lastUpdate\\", (select (select json_build_object('aggregate', (select json_build_object('max', json_build_object('rentalRate', coalesce(max(\\"f2\\".\\"rental_rate\\"), 0))) from (select \\"f3\\".\\"rental_rate\\" from \\"film\\" as \\"f3\\" inner join \\"film_actor\\" as \\"f4\\" on \\"f4\\".\\"film_id\\" = \\"f3\\".\\"film_id\\" where \\"a1\\".\\"actor_id\\" = \\"f4\\".\\"actor_id\\" order by \\"f3\\".\\"title\\" desc limit ? offset ?) as \\"f2\\")) as \\"page\\") as \\"f1\\") as \\"filmsAggregate\\" from \\"actor\\" as \\"a1\\" where \\"a1\\".\\"actor_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres loadPaginated with additional options 2`] = `
Array [
  2,
  1,
  10,
  1,
]
`;

exports[`FindByIdBuilder postgres loadPaginated with junction table 1`] = `"select \\"a1\\".\\"actor_id\\" as \\"id\\", \\"a1\\".\\"first_name\\" as \\"firstName\\", \\"a1\\".\\"last_name\\" as \\"lastName\\", \\"a1\\".\\"last_update\\" as \\"lastUpdate\\", (select (select json_build_object('aggregate', (select json_build_object('max', json_build_object('rentalRate', coalesce(max(\\"f2\\".\\"rental_rate\\"), 0))) from (select \\"f3\\".\\"rental_rate\\" from \\"film\\" as \\"f3\\" inner join \\"film_actor\\" as \\"f4\\" on \\"f4\\".\\"film_id\\" = \\"f3\\".\\"film_id\\" where \\"a1\\".\\"actor_id\\" = \\"f4\\".\\"actor_id\\") as \\"f2\\")) as \\"page\\") as \\"f1\\") as \\"filmsAggregate\\" from \\"actor\\" as \\"a1\\" where \\"a1\\".\\"actor_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres loadPaginated with junction table 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder postgres resolveInfo basic query 1`] = `"select \\"a1\\".\\"actor_id\\" as \\"id\\" from \\"actor\\" as \\"a1\\" where \\"a1\\".\\"actor_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres resolveInfo basic query 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder postgres resolveInfo query with alias 1`] = `"select \\"a1\\".\\"actor_id\\" as \\"id\\", \\"a1\\".\\"first_name\\" as \\"firstName\\", \\"a1\\".\\"last_name\\" as \\"lastName\\", (select coalesce(nullif(json_agg(\\"m1\\".\\"o\\")::text, '[null]'), '[]')::json from (select json_build_object('id', \\"f1\\".\\"film_id\\", 'title', \\"f1\\".\\"title\\") as \\"o\\" from \\"film\\" as \\"f1\\" inner join \\"film_actor\\" as \\"f2\\" on \\"f2\\".\\"film_id\\" = \\"f1\\".\\"film_id\\" where \\"a1\\".\\"actor_id\\" = \\"f2\\".\\"actor_id\\") as \\"m1\\") as \\"movies\\" from \\"actor\\" as \\"a1\\" where \\"a1\\".\\"actor_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres resolveInfo query with alias 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder postgres resolveInfo query with nested aggregate 1`] = `"select \\"a1\\".\\"actor_id\\" as \\"id\\", \\"a1\\".\\"first_name\\" as \\"firstName\\", \\"a1\\".\\"last_name\\" as \\"lastName\\", (select (select json_build_object('aggregate', (select json_build_object('count', coalesce(count(\\"f2\\".\\"film_id\\"), 0), 'avg', json_build_object('rentalRate', coalesce(avg(\\"f2\\".\\"rental_rate\\"), 0), 'replacementCost', coalesce(avg(\\"f2\\".\\"replacement_cost\\"), 0)), 'sum', json_build_object('rentalRate', coalesce(sum(\\"f2\\".\\"rental_rate\\"), 0), 'replacementCost', coalesce(sum(\\"f2\\".\\"replacement_cost\\"), 0)), 'min', json_build_object('title', min(\\"f2\\".\\"title\\"), 'releaseYear', coalesce(min(\\"f2\\".\\"release_year\\"), 0)), 'max', json_build_object('title', max(\\"f2\\".\\"title\\"), 'releaseYear', coalesce(max(\\"f2\\".\\"release_year\\"), 0))) from (select \\"f3\\".\\"film_id\\", \\"f3\\".\\"rental_rate\\", \\"f3\\".\\"replacement_cost\\", \\"f3\\".\\"title\\", \\"f3\\".\\"release_year\\" from \\"film\\" as \\"f3\\" inner join \\"film_actor\\" as \\"f4\\" on \\"f4\\".\\"film_id\\" = \\"f3\\".\\"film_id\\" where \\"a1\\".\\"actor_id\\" = \\"f4\\".\\"actor_id\\" and \\"f3\\".\\"title\\" = ? order by \\"f3\\".\\"release_year\\" desc limit ? offset ?) as \\"f2\\")) as \\"page\\") as \\"f1\\") as \\"filmsPaginated\\" from \\"actor\\" as \\"a1\\" where \\"a1\\".\\"actor_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres resolveInfo query with nested aggregate 2`] = `
Array [
  "Title",
  10,
  3,
  10,
  1,
]
`;

exports[`FindByIdBuilder postgres resolveInfo query with nested arguments 1`] = `"select \\"a1\\".\\"actor_id\\" as \\"id\\", \\"a1\\".\\"first_name\\" as \\"firstName\\", \\"a1\\".\\"last_name\\" as \\"lastName\\", (select coalesce(nullif(json_agg(\\"f1\\".\\"o\\")::text, '[null]'), '[]')::json from (select json_build_object('id', \\"f2\\".\\"film_id\\", 'title', \\"f2\\".\\"title\\") as \\"o\\" from \\"film\\" as \\"f2\\" inner join \\"film_actor\\" as \\"f3\\" on \\"f3\\".\\"film_id\\" = \\"f2\\".\\"film_id\\" where \\"a1\\".\\"actor_id\\" = \\"f3\\".\\"actor_id\\" and \\"f2\\".\\"title\\" = ? order by \\"f2\\".\\"release_year\\" desc limit ? offset ?) as \\"f1\\") as \\"films\\" from \\"actor\\" as \\"a1\\" where \\"a1\\".\\"actor_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres resolveInfo query with nested arguments 2`] = `
Array [
  "Title",
  10,
  3,
  10,
  1,
]
`;

exports[`FindByIdBuilder postgres resolveInfo valid path 1`] = `"select \\"c1\\".\\"customer_id\\" as \\"id\\" from \\"customer\\" as \\"c1\\" where \\"c1\\".\\"customer_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres resolveInfo valid path 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder postgres select add 1`] = `"select \\"a1\\".\\"first_name\\" as \\"firstName\\", \\"a1\\".\\"last_name\\" as \\"lastName\\", \\"a1\\".\\"actor_id\\" as \\"id\\" from \\"actor\\" as \\"a1\\" where \\"a1\\".\\"actor_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres select add 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder postgres select add raw 1`] = `"select \\"a1\\".\\"first_name\\" as \\"firstName\\", \\"a1\\".\\"first_name\\" as \\"first_name\\", \\"a1\\".\\"first_name\\" as \\"first_name_again\\" from \\"actor\\" as \\"a1\\" where \\"a1\\".\\"actor_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres select add raw 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder postgres select all 1`] = `"select \\"a1\\".\\"actor_id\\" as \\"id\\", \\"a1\\".\\"first_name\\" as \\"firstName\\", \\"a1\\".\\"last_name\\" as \\"lastName\\", \\"a1\\".\\"last_update\\" as \\"lastUpdate\\" from \\"actor\\" as \\"a1\\" where \\"a1\\".\\"actor_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres select all 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder postgres select with missing field 1`] = `"select \\"a1\\".\\"last_name\\" as \\"lastName\\" from \\"actor\\" as \\"a1\\" where \\"a1\\".\\"actor_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres select with missing field 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder postgres select with multiple fields 1`] = `"select \\"a1\\".\\"first_name\\" as \\"firstName\\", \\"a1\\".\\"last_name\\" as \\"lastName\\" from \\"actor\\" as \\"a1\\" where \\"a1\\".\\"actor_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres select with multiple fields 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder postgres select with no fields 1`] = `"select null from \\"actor\\" as \\"a1\\" where \\"a1\\".\\"actor_id\\" = ? limit ?"`;

exports[`FindByIdBuilder postgres select with no fields 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder sqlite basic queries no additional options 1`] = `"select \`a1\`.\`actor_id\` as \`id\`, \`a1\`.\`first_name\` as \`firstName\`, \`a1\`.\`last_name\` as \`lastName\`, \`a1\`.\`last_update\` as \`lastUpdate\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite basic queries no additional options 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder sqlite load nested 1`] = `"select \`f1\`.\`film_id\` as \`id\`, \`f1\`.\`title\` as \`title\`, \`f1\`.\`description\` as \`description\`, \`f1\`.\`release_year\` as \`releaseYear\`, \`f1\`.\`length\` as \`length\`, \`f1\`.\`rating\` as \`rating\`, \`f1\`.\`rental_rate\` as \`rentalRate\`, \`f1\`.\`rental_duration\` as \`rentalDuration\`, \`f1\`.\`replacement_cost\` as \`replacementCost\`, \`f1\`.\`last_update\` as \`lastUpdate\`, (select json_group_array(json(\`a1\`.\`o\`)) from (select json_object('id', \`a2\`.\`actor_id\`, 'firstName', \`a2\`.\`first_name\`, 'lastName', \`a2\`.\`last_name\`, 'lastUpdate', \`a2\`.\`last_update\`, 'films', (select json_group_array(json(\`f3\`.\`o\`)) from (select json_object('id', \`f4\`.\`film_id\`, 'title', \`f4\`.\`title\`, 'description', \`f4\`.\`description\`, 'releaseYear', \`f4\`.\`release_year\`, 'length', \`f4\`.\`length\`, 'rating', \`f4\`.\`rating\`, 'rentalRate', \`f4\`.\`rental_rate\`, 'rentalDuration', \`f4\`.\`rental_duration\`, 'replacementCost', \`f4\`.\`replacement_cost\`, 'lastUpdate', \`f4\`.\`last_update\`, 'language', (select json_extract(json_group_array(json(\`l1\`.\`o\`)), '$[0]') from (select json_object('id', \`l2\`.\`language_id\`, 'name', \`l2\`.\`name\`, 'lastUpdate', \`l2\`.\`last_update\`) as \`o\` from \`language\` as \`l2\` where \`f4\`.\`language_id\` = \`l2\`.\`language_id\` limit ?) as \`l1\`)) as \`o\` from \`film\` as \`f4\` inner join \`film_actor\` as \`f5\` on \`f5\`.\`film_id\` = \`f4\`.\`film_id\` where \`a2\`.\`actor_id\` = \`f5\`.\`actor_id\` limit ?) as \`f3\`)) as \`o\` from \`actor\` as \`a2\` inner join \`film_actor\` as \`f2\` on \`f2\`.\`actor_id\` = \`a2\`.\`actor_id\` where \`f1\`.\`film_id\` = \`f2\`.\`film_id\` limit ?) as \`a1\`) as \`actors\` from \`film\` as \`f1\` where \`f1\`.\`film_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite load nested 2`] = `
Array [
  1,
  4,
  3,
  10,
  1,
]
`;

exports[`FindByIdBuilder sqlite load with FK on builder table 1`] = `"select \`f1\`.\`film_id\` as \`id\`, \`f1\`.\`title\` as \`title\`, \`f1\`.\`description\` as \`description\`, \`f1\`.\`release_year\` as \`releaseYear\`, \`f1\`.\`length\` as \`length\`, \`f1\`.\`rating\` as \`rating\`, \`f1\`.\`rental_rate\` as \`rentalRate\`, \`f1\`.\`rental_duration\` as \`rentalDuration\`, \`f1\`.\`replacement_cost\` as \`replacementCost\`, \`f1\`.\`last_update\` as \`lastUpdate\`, (select json_extract(json_group_array(json(\`l1\`.\`o\`)), '$[0]') from (select json_object('id', \`l2\`.\`language_id\`, 'name', \`l2\`.\`name\`, 'lastUpdate', \`l2\`.\`last_update\`) as \`o\` from \`language\` as \`l2\` where \`f1\`.\`language_id\` = \`l2\`.\`language_id\` limit ?) as \`l1\`) as \`language\` from \`film\` as \`f1\` where \`f1\`.\`film_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite load with FK on builder table 2`] = `
Array [
  1,
  10,
  1,
]
`;

exports[`FindByIdBuilder sqlite load with FK on joined table 1`] = `"select \`l1\`.\`language_id\` as \`id\`, \`l1\`.\`name\` as \`name\`, \`l1\`.\`last_update\` as \`lastUpdate\`, (select json_group_array(json(\`f1\`.\`o\`)) from (select json_object('id', \`f2\`.\`film_id\`, 'title', \`f2\`.\`title\`, 'description', \`f2\`.\`description\`, 'releaseYear', \`f2\`.\`release_year\`, 'length', \`f2\`.\`length\`, 'rating', \`f2\`.\`rating\`, 'rentalRate', \`f2\`.\`rental_rate\`, 'rentalDuration', \`f2\`.\`rental_duration\`, 'replacementCost', \`f2\`.\`replacement_cost\`, 'lastUpdate', \`f2\`.\`last_update\`) as \`o\` from \`film\` as \`f2\` where \`l1\`.\`language_id\` = \`f2\`.\`language_id\`) as \`f1\`) as \`films\` from \`language\` as \`l1\` where \`l1\`.\`language_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite load with FK on joined table 2`] = `
Array [
  5,
  1,
]
`;

exports[`FindByIdBuilder sqlite load with additional options 1`] = `"select \`f1\`.\`film_id\` as \`id\`, \`f1\`.\`title\` as \`title\`, \`f1\`.\`description\` as \`description\`, \`f1\`.\`release_year\` as \`releaseYear\`, \`f1\`.\`length\` as \`length\`, \`f1\`.\`rating\` as \`rating\`, \`f1\`.\`rental_rate\` as \`rentalRate\`, \`f1\`.\`rental_duration\` as \`rentalDuration\`, \`f1\`.\`replacement_cost\` as \`replacementCost\`, \`f1\`.\`last_update\` as \`lastUpdate\`, (select json_group_array(json(\`a1\`.\`o\`)) from (select json_object('firstName', \`a2\`.\`first_name\`) as \`o\` from \`actor\` as \`a2\` inner join \`film_actor\` as \`f2\` on \`f2\`.\`actor_id\` = \`a2\`.\`actor_id\` where \`f1\`.\`film_id\` = \`f2\`.\`film_id\` order by \`a2\`.\`first_name\` desc limit ? offset ?) as \`a1\`) as \`actors\` from \`film\` as \`f1\` where \`f1\`.\`film_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite load with additional options 2`] = `
Array [
  2,
  1,
  10,
  1,
]
`;

exports[`FindByIdBuilder sqlite load with alias 1`] = `"select \`f1\`.\`film_id\` as \`id\`, \`f1\`.\`title\` as \`title\`, \`f1\`.\`description\` as \`description\`, \`f1\`.\`release_year\` as \`releaseYear\`, \`f1\`.\`length\` as \`length\`, \`f1\`.\`rating\` as \`rating\`, \`f1\`.\`rental_rate\` as \`rentalRate\`, \`f1\`.\`rental_duration\` as \`rentalDuration\`, \`f1\`.\`replacement_cost\` as \`replacementCost\`, \`f1\`.\`last_update\` as \`lastUpdate\`, (select json_group_array(json(\`p1\`.\`o\`)) from (select json_object('id', \`a1\`.\`actor_id\`, 'firstName', \`a1\`.\`first_name\`, 'lastName', \`a1\`.\`last_name\`, 'lastUpdate', \`a1\`.\`last_update\`) as \`o\` from \`actor\` as \`a1\` inner join \`film_actor\` as \`f2\` on \`f2\`.\`actor_id\` = \`a1\`.\`actor_id\` where \`f1\`.\`film_id\` = \`f2\`.\`film_id\`) as \`p1\`) as \`performers\` from \`film\` as \`f1\` where \`f1\`.\`film_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite load with alias 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder sqlite load with default builder 1`] = `"select \`f1\`.\`film_id\` as \`id\`, \`f1\`.\`title\` as \`title\`, \`f1\`.\`description\` as \`description\`, \`f1\`.\`release_year\` as \`releaseYear\`, \`f1\`.\`length\` as \`length\`, \`f1\`.\`rating\` as \`rating\`, \`f1\`.\`rental_rate\` as \`rentalRate\`, \`f1\`.\`rental_duration\` as \`rentalDuration\`, \`f1\`.\`replacement_cost\` as \`replacementCost\`, \`f1\`.\`last_update\` as \`lastUpdate\`, (select json_group_array(json(\`a1\`.\`o\`)) from (select json_object('id', \`a2\`.\`actor_id\`, 'firstName', \`a2\`.\`first_name\`, 'lastName', \`a2\`.\`last_name\`, 'lastUpdate', \`a2\`.\`last_update\`) as \`o\` from \`actor\` as \`a2\` inner join \`film_actor\` as \`f2\` on \`f2\`.\`actor_id\` = \`a2\`.\`actor_id\` where \`f1\`.\`film_id\` = \`f2\`.\`film_id\`) as \`a1\`) as \`actors\` from \`film\` as \`f1\` where \`f1\`.\`film_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite load with default builder 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder sqlite load with junction table 1`] = `"select \`f1\`.\`film_id\` as \`id\`, \`f1\`.\`title\` as \`title\`, \`f1\`.\`description\` as \`description\`, \`f1\`.\`release_year\` as \`releaseYear\`, \`f1\`.\`length\` as \`length\`, \`f1\`.\`rating\` as \`rating\`, \`f1\`.\`rental_rate\` as \`rentalRate\`, \`f1\`.\`rental_duration\` as \`rentalDuration\`, \`f1\`.\`replacement_cost\` as \`replacementCost\`, \`f1\`.\`last_update\` as \`lastUpdate\`, (select json_group_array(json(\`a1\`.\`o\`)) from (select json_object('id', \`a2\`.\`actor_id\`, 'firstName', \`a2\`.\`first_name\`, 'lastName', \`a2\`.\`last_name\`, 'lastUpdate', \`a2\`.\`last_update\`) as \`o\` from \`actor\` as \`a2\` inner join \`film_actor\` as \`f2\` on \`f2\`.\`actor_id\` = \`a2\`.\`actor_id\` where \`f1\`.\`film_id\` = \`f2\`.\`film_id\`) as \`a1\`) as \`actors\` from \`film\` as \`f1\` where \`f1\`.\`film_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite load with junction table 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder sqlite loadPaginated with FK on builder table 1`] = `"select \`f1\`.\`film_id\` as \`id\`, \`f1\`.\`title\` as \`title\`, \`f1\`.\`description\` as \`description\`, \`f1\`.\`release_year\` as \`releaseYear\`, \`f1\`.\`length\` as \`length\`, \`f1\`.\`rating\` as \`rating\`, \`f1\`.\`rental_rate\` as \`rentalRate\`, \`f1\`.\`rental_duration\` as \`rentalDuration\`, \`f1\`.\`replacement_cost\` as \`replacementCost\`, \`f1\`.\`last_update\` as \`lastUpdate\`, (select (select json_object('aggregate', (select json_object('max', json_object('name', max(\`l2\`.\`name\`))) from (select \`l3\`.\`name\` from \`language\` as \`l3\` where \`f1\`.\`language_id\` = \`l3\`.\`language_id\`) as \`l2\`)) as \`page\`) as \`l1\`) as \`languageAggregate\` from \`film\` as \`f1\` where \`f1\`.\`film_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite loadPaginated with FK on builder table 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder sqlite loadPaginated with FK on joined table 1`] = `"select \`l1\`.\`language_id\` as \`id\`, \`l1\`.\`name\` as \`name\`, \`l1\`.\`last_update\` as \`lastUpdate\`, (select (select json_object('aggregate', (select json_object('max', json_object('rentalRate', coalesce(max(\`f2\`.\`rental_rate\`), 0))) from (select \`f3\`.\`rental_rate\` from \`film\` as \`f3\` where \`l1\`.\`language_id\` = \`f3\`.\`language_id\`) as \`f2\`)) as \`page\`) as \`f1\`) as \`filmsAggregate\` from \`language\` as \`l1\` where \`l1\`.\`language_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite loadPaginated with FK on joined table 2`] = `
Array [
  1,
  1,
]
`;

exports[`FindByIdBuilder sqlite loadPaginated with additional options 1`] = `"select \`a1\`.\`actor_id\` as \`id\`, \`a1\`.\`first_name\` as \`firstName\`, \`a1\`.\`last_name\` as \`lastName\`, \`a1\`.\`last_update\` as \`lastUpdate\`, (select (select json_object('aggregate', (select json_object('max', json_object('rentalRate', coalesce(max(\`f2\`.\`rental_rate\`), 0))) from (select \`f3\`.\`rental_rate\` from \`film\` as \`f3\` inner join \`film_actor\` as \`f4\` on \`f4\`.\`film_id\` = \`f3\`.\`film_id\` where \`a1\`.\`actor_id\` = \`f4\`.\`actor_id\` order by \`f3\`.\`title\` desc limit ? offset ?) as \`f2\`)) as \`page\`) as \`f1\`) as \`filmsAggregate\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite loadPaginated with additional options 2`] = `
Array [
  2,
  1,
  10,
  1,
]
`;

exports[`FindByIdBuilder sqlite loadPaginated with junction table 1`] = `"select \`a1\`.\`actor_id\` as \`id\`, \`a1\`.\`first_name\` as \`firstName\`, \`a1\`.\`last_name\` as \`lastName\`, \`a1\`.\`last_update\` as \`lastUpdate\`, (select (select json_object('aggregate', (select json_object('max', json_object('rentalRate', coalesce(max(\`f2\`.\`rental_rate\`), 0))) from (select \`f3\`.\`rental_rate\` from \`film\` as \`f3\` inner join \`film_actor\` as \`f4\` on \`f4\`.\`film_id\` = \`f3\`.\`film_id\` where \`a1\`.\`actor_id\` = \`f4\`.\`actor_id\`) as \`f2\`)) as \`page\`) as \`f1\`) as \`filmsAggregate\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite loadPaginated with junction table 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder sqlite resolveInfo basic query 1`] = `"select \`a1\`.\`actor_id\` as \`id\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite resolveInfo basic query 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder sqlite resolveInfo query with alias 1`] = `"select \`a1\`.\`actor_id\` as \`id\`, \`a1\`.\`first_name\` as \`firstName\`, \`a1\`.\`last_name\` as \`lastName\`, (select json_group_array(json(\`m1\`.\`o\`)) from (select json_object('id', \`f1\`.\`film_id\`, 'title', \`f1\`.\`title\`) as \`o\` from \`film\` as \`f1\` inner join \`film_actor\` as \`f2\` on \`f2\`.\`film_id\` = \`f1\`.\`film_id\` where \`a1\`.\`actor_id\` = \`f2\`.\`actor_id\`) as \`m1\`) as \`movies\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite resolveInfo query with alias 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder sqlite resolveInfo query with nested aggregate 1`] = `"select \`a1\`.\`actor_id\` as \`id\`, \`a1\`.\`first_name\` as \`firstName\`, \`a1\`.\`last_name\` as \`lastName\`, (select (select json_object('aggregate', (select json_object('count', coalesce(count(\`f2\`.\`film_id\`), 0), 'avg', json_object('rentalRate', coalesce(avg(\`f2\`.\`rental_rate\`), 0), 'replacementCost', coalesce(avg(\`f2\`.\`replacement_cost\`), 0)), 'sum', json_object('rentalRate', coalesce(sum(\`f2\`.\`rental_rate\`), 0), 'replacementCost', coalesce(sum(\`f2\`.\`replacement_cost\`), 0)), 'min', json_object('title', min(\`f2\`.\`title\`), 'releaseYear', coalesce(min(\`f2\`.\`release_year\`), 0)), 'max', json_object('title', max(\`f2\`.\`title\`), 'releaseYear', coalesce(max(\`f2\`.\`release_year\`), 0))) from (select \`f3\`.\`film_id\`, \`f3\`.\`rental_rate\`, \`f3\`.\`replacement_cost\`, \`f3\`.\`title\`, \`f3\`.\`release_year\` from \`film\` as \`f3\` inner join \`film_actor\` as \`f4\` on \`f4\`.\`film_id\` = \`f3\`.\`film_id\` where \`a1\`.\`actor_id\` = \`f4\`.\`actor_id\` and \`f3\`.\`title\` = ? order by \`f3\`.\`release_year\` desc limit ? offset ?) as \`f2\`)) as \`page\`) as \`f1\`) as \`filmsPaginated\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite resolveInfo query with nested aggregate 2`] = `
Array [
  "Title",
  10,
  3,
  10,
  1,
]
`;

exports[`FindByIdBuilder sqlite resolveInfo query with nested arguments 1`] = `"select \`a1\`.\`actor_id\` as \`id\`, \`a1\`.\`first_name\` as \`firstName\`, \`a1\`.\`last_name\` as \`lastName\`, (select json_group_array(json(\`f1\`.\`o\`)) from (select json_object('id', \`f2\`.\`film_id\`, 'title', \`f2\`.\`title\`) as \`o\` from \`film\` as \`f2\` inner join \`film_actor\` as \`f3\` on \`f3\`.\`film_id\` = \`f2\`.\`film_id\` where \`a1\`.\`actor_id\` = \`f3\`.\`actor_id\` and \`f2\`.\`title\` = ? order by \`f2\`.\`release_year\` desc limit ? offset ?) as \`f1\`) as \`films\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite resolveInfo query with nested arguments 2`] = `
Array [
  "Title",
  10,
  3,
  10,
  1,
]
`;

exports[`FindByIdBuilder sqlite resolveInfo valid path 1`] = `"select \`c1\`.\`customer_id\` as \`id\` from \`customer\` as \`c1\` where \`c1\`.\`customer_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite resolveInfo valid path 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder sqlite select add 1`] = `"select \`a1\`.\`first_name\` as \`firstName\`, \`a1\`.\`last_name\` as \`lastName\`, \`a1\`.\`actor_id\` as \`id\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite select add 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder sqlite select add raw 1`] = `"select \`a1\`.\`first_name\` as \`firstName\`, \`a1\`.\`first_name\` as \`first_name\`, \`a1\`.\`first_name\` as \`first_name_again\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite select add raw 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder sqlite select all 1`] = `"select \`a1\`.\`actor_id\` as \`id\`, \`a1\`.\`first_name\` as \`firstName\`, \`a1\`.\`last_name\` as \`lastName\`, \`a1\`.\`last_update\` as \`lastUpdate\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite select all 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder sqlite select with missing field 1`] = `"select \`a1\`.\`last_name\` as \`lastName\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite select with missing field 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder sqlite select with multiple fields 1`] = `"select \`a1\`.\`first_name\` as \`firstName\`, \`a1\`.\`last_name\` as \`lastName\` from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite select with multiple fields 2`] = `
Array [
  10,
  1,
]
`;

exports[`FindByIdBuilder sqlite select with no fields 1`] = `"select null from \`actor\` as \`a1\` where \`a1\`.\`actor_id\` = ? limit ?"`;

exports[`FindByIdBuilder sqlite select with no fields 2`] = `
Array [
  10,
  1,
]
`;
